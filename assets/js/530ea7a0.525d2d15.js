"use strict";(self.webpackChunkask_docs=self.webpackChunkask_docs||[]).push([[459],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(g,s(s({ref:t},c),{},{components:n})):r.createElement(g,s({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3148:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={title:"Setup",slug:"/getting-started/setup"},s=void 0,i={unversionedId:"getting-started/setup",id:"getting-started/setup",title:"Setup",description:"AssemblyScript",source:"@site/docs/getting-started/setup.md",sourceDirName:"getting-started",slug:"/getting-started/setup",permalink:"/ask-lang/ask-docs/getting-started/setup",draft:!1,editUrl:"https://github.com/ask-lang/ask-docs/edit/main/docs/getting-started/setup.md",tags:[],version:"current",frontMatter:{title:"Setup",slug:"/getting-started/setup"},sidebar:"docs",previous:{title:"Ask! vs. ink!",permalink:"/ask-lang/ask-docs/ask-vs-ink"},next:{title:"Creating an Ask! Project",permalink:"/ask-lang/ask-docs/getting-started/creating-an-ask-project"}},l={},p=[{value:"AssemblyScript",id:"assemblyscript",level:2},{value:"Install <code>AssemblyScript</code> &amp; <code>Ask!</code>",id:"install-assemblyscript--ask",level:2},{value:"Configuration",id:"configuration",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"assemblyscript"},"AssemblyScript"),(0,a.kt)("p",null,"Before reading this document, you need to have programming foundation in ",(0,a.kt)("a",{parentName:"p",href:"https://www.assemblyscript.org/"},"AssemblyScript")," or Typescript."),(0,a.kt)("h2",{id:"install-assemblyscript--ask"},"Install ",(0,a.kt)("inlineCode",{parentName:"h2"},"AssemblyScript")," & ",(0,a.kt)("inlineCode",{parentName:"h2"},"Ask!")),(0,a.kt)("p",null,"Since ",(0,a.kt)("a",{parentName:"p",href:"https://www.assemblyscript.org/"},"AssemblyScript")," and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ask-lang/ask"},"Ask!")," are provided as npm dependencies.\nDevelopers only need to use the package manager ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"npm")," to install it, and it's recommended to always use the latest version,\nbut currently ",(0,a.kt)("inlineCode",{parentName:"p"},"Ask!")," only supports assemblyscript v0.19:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    ...\n    "dependencies": {\n        "ask-lang": "^0.4.0-rc3"\n    },\n    "devDependencies": {\n        "ask-transform": "^0.4.0-rc3",\n        "assemblyscript": "^0.19"\n    },\n    ...\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note"),": The ",(0,a.kt)("inlineCode",{parentName:"p"},"ask-lang")," won't automatically import the ",(0,a.kt)("inlineCode",{parentName:"p"},"ask-transform"),", which is the ",(0,a.kt)("inlineCode",{parentName:"p"},"Ask!")," plugin for AssemblyScript."),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"AssemblyScript supports command line parameters (",(0,a.kt)("inlineCode",{parentName:"p"},"asc <options>"),") and the configuration file (",(0,a.kt)("inlineCode",{parentName:"p"},"asc --config <file>"),") to compile AssemblyScript projects.\nIt is recommended that developers always use the configuration file ",(0,a.kt)("inlineCode",{parentName:"p"},"asconfig.json")," to compile smart contracts."),(0,a.kt)("p",null,"A simple ",(0,a.kt)("inlineCode",{parentName:"p"},"asconfig.json")," template is as follows, this template inherits the configuration of ",(0,a.kt)("inlineCode",{parentName:"p"},"ask-lang"),",\nwhich provides a reasonable configuration that developers can also override."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "extends": "ask-lang/asconfig.json",\n    "targets": {\n        "debug": {\n            "binaryFile": "build/debug.wasm",\n            "textFile": "build/debug.wat"\n        },\n        "release": {\n            "binaryFile": "build/release.wasm",\n            "textFile": "build/release.wat"\n        }\n    }\n}\n')),(0,a.kt)("p",null,"Current ",(0,a.kt)("inlineCode",{parentName:"p"},"ask-lang/asconfig.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "targets": {\n        "debug": {\n            "sourceMap": true,\n            "debug": true\n        },\n        "release": {\n            "sourceMap": false,\n            "optimizeLevel": 3,\n            "shrinkLevel": 2,\n            "converge": false,\n            "noAssert": false\n        }\n    },\n    "options": {\n        "transform": ["ask-transform", "as-serde-transform"],\n        "importMemory": true,\n        "initialMemory": 2,\n        "maximumMemory": 16,\n        "noExportMemory": true,\n        "runtime": "stub",\n        "use": "abort=",\n        "disable": ["Sign-extension"]\n    }\n}\n')),(0,a.kt)("p",null,"The most important and basic configuration for AssemblyScript compiler plugins is the ",(0,a.kt)("inlineCode",{parentName:"p"},"transform")," option.\nYou need to add the following configuration to ",(0,a.kt)("inlineCode",{parentName:"p"},"asconfig.json")," to make AssemblyScript use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Ask!")," plugins."),(0,a.kt)("p",null,"Note that the order of the two plugins here.\nSince the ",(0,a.kt)("inlineCode",{parentName:"p"},"ask-transform")," plugin automatically generates the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ask-lang/serde-as"},"as-serde")," (used for contract encoding/decoding) decorators internally, and ",(0,a.kt)("inlineCode",{parentName:"p"},"Ask!")," relies on the ",(0,a.kt)("inlineCode",{parentName:"p"},"as-serde-transform")," plugin to process these decorators again, so ",(0,a.kt)("inlineCode",{parentName:"p"},"ask-transform")," must be placed before ",(0,a.kt)("inlineCode",{parentName:"p"},"as-serde-transform"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    ...\n    "options": {\n        "transform": ["ask-transform", "as-serde-transform"],\n        ... // other options here\n    }\n}\n')),(0,a.kt)("p",null,"In addition to the above configuration, you also need to configure reasonable compilation options so that the generated wasm can be deployed normally:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    ...\n    "options": {\n        ... // other options here\n        "importMemory": true,\n        "initialMemory": 2,\n        "maximumMemory": 16,\n        "noExportMemory": true,\n        // no runtime\n        "runtime": "stub",\n        "use": "abort=",\n        // pallet-contracts do not support any wasm extension now\n        "disable": ["Sign-extension"]\n    }\n}\n')))}m.isMDXComponent=!0}}]);