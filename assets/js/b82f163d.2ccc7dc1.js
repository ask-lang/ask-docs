"use strict";(self.webpackChunkask_docs=self.webpackChunkask_docs||[]).push([[393],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>y});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(r),y=s,f=u["".concat(c,".").concat(y)]||u[y]||m[y]||a;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function y(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,o=new Array(a);o[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8819:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=r(7462),s=(r(7294),r(3905));const a={title:"Why AssemblyScript for Smart Contracts?",slug:"/why-assemblyscript-for-smart-contracts"},o=void 0,i={unversionedId:"intro/why-assemblyscript",id:"intro/why-assemblyscript",title:"Why AssemblyScript for Smart Contracts?",description:"Ask! chooses not to invent a new programming language, but rather adapt a subset of AssemblyScript to serve our purpose.",source:"@site/docs/intro/why-assemblyscript.md",sourceDirName:"intro",slug:"/why-assemblyscript-for-smart-contracts",permalink:"/ask-docs/why-assemblyscript-for-smart-contracts",draft:!1,editUrl:"https://github.com/ask-lang/ask-docs/edit/main/docs/intro/why-assemblyscript.md",tags:[],version:"current",frontMatter:{title:"Why AssemblyScript for Smart Contracts?",slug:"/why-assemblyscript-for-smart-contracts"},sidebar:"docs",previous:{title:"Overview",permalink:"/ask-docs/"},next:{title:"Why WebAssembly for Smart Contracts?",permalink:"/ask-docs/why-webassembly-for-smart-contracts"}},c={},l=[],p={toc:l};function m(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Ask! chooses not to invent a new programming language, but rather adapt a subset of ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/AssemblyScript/assemblyscript"},"AssemblyScript")," to serve our purpose.\nIf this doesn't already convince you, you find some good reasons here:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"AssemblyScript is a TypeScript-like language for WebAssembly. And it's a popular programming language that supports the WASM platform in addition to C/C++/Rust.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"In a non-strict sense, AssemblyScript syntax is a subset of TypeScript syntax. There exists a large number of developers using TypeScript today, and these developers can learn AssemblyScript easily.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Compared with ",(0,s.kt)("inlineCode",{parentName:"p"},"ink!"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"Ask!")," can effectively reduce the difficulty for developers to learn WASM contracts, attract more TypeScript developers to develop WASM smart contracts, and enrich the WASM smart contract ecosystem.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Contracts written in AssemblyScript may generate smaller WASM code than contracts written in Rust when implementing the same logical functionality."))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NOTE"),": AssemblyScript also has some drawbacks, such as the compiler is not robust enough, the ecosystem is not good enough and other issues. We will not discussed them here."))}m.isMDXComponent=!0}}]);